#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üè® Hotel Manager - Build Script');
console.log('===============================\n');

// Ellen≈ërizz√ºk, hogy a sz√ºks√©ges f√°jlok l√©teznek-e
const requiredFiles = [
    'package.json',
    'main.js',
    'index.html',
    'src/AssetManager.js',
    'src/GameData.js'
];

console.log('F√°jlok ellen≈ërz√©se...');
for (const file of requiredFiles) {
    if (!fs.existsSync(file)) {
        console.error(`‚ùå Hi√°nyz√≥ f√°jl: ${file}`);
        process.exit(1);
    }
}
console.log('‚úÖ Minden sz√ºks√©ges f√°jl megtal√°lhat√≥\n');

// NPM install
console.log('F√ºgg≈ës√©gek telep√≠t√©se...');
try {
    execSync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ F√ºgg≈ës√©gek telep√≠tve\n');
} catch (error) {
    console.error('‚ùå Hiba a f√ºgg≈ës√©gek telep√≠t√©se sor√°n');
    process.exit(1);
}

// Build t√≠pus kiv√°laszt√°sa
const buildType = process.argv[2] || 'dev';

if (buildType === 'windows') {
    console.log('Windows build l√©trehoz√°sa...');
    try {
        execSync('npm run build:windows', { stdio: 'inherit' });
        console.log('‚úÖ Windows build elk√©sz√ºlt\n');
    } catch (error) {
        console.error('‚ùå Hiba a Windows build sor√°n');
        process.exit(1);
    }
} else if (buildType === 'web') {
    console.log('Web build l√©trehoz√°sa...');
    try {
        execSync('npm run build', { stdio: 'inherit' });
        console.log('‚úÖ Web build elk√©sz√ºlt\n');
    } catch (error) {
        console.error('‚ùå Hiba a web build sor√°n');
        process.exit(1);
    }
} else {
    console.log('Fejleszt≈ëi szerver ind√≠t√°sa...');
    try {
        execSync('npm run dev', { stdio: 'inherit' });
    } catch (error) {
        console.error('‚ùå Hiba a fejleszt≈ëi szerver ind√≠t√°sa sor√°n');
        process.exit(1);
    }
}

console.log('üéâ Build folyamat befejezve!'); 